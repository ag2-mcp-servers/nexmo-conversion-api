# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:35:03+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from fastapi import Query

from models import Delivered

app = MCPProxy(
    contact={
        'email': 'devrel@nexmo.com',
        'name': 'Nexmo.com',
        'url': 'https://developer.nexmo.com/',
        'x-twitter': 'Nexmo',
    },
    description='The Conversion API allows you to tell Nexmo about the reliability of your 2FA communications. Sending conversion data back to us means that Nexmo can deliver messages faster and more reliably.\nThe conversion data you send us is confidential: Nexmo does not share it with third parties.\nIn order to identify the carriers who provide the best performance, Nexmo continually tests the routes we use to deliver SMS and voice calls. Using Adaptive Routingâ„¢, Nexmo actively reroutes messages through different carrier routes and ensures faster and more reliable delivery for your messages. The route choice is made using millions of real-time conversion data points.',
    license={
        'name': 'The MIT License (MIT)',
        'url': 'https://opensource.org/licenses/MIT',
    },
    termsOfService='https://www.nexmo.com/terms-of-use',
    title='Nexmo Conversion API',
    version='1.0.1',
    servers=[{'url': 'https://api.nexmo.com/conversions'}],
)


@app.post(
    '/sms',
    description=""" Send a Conversion API request with information about the SMS message identified by `message-id`. Nexmo uses your conversion data and internal information about `message-id` to help improve our routing of messages in the future. """,
    tags=['sms_delivery_tracking'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="sig"),
    ],
)
def sms_conversion(
    message_id: str = Query(..., alias='message-id'),
    delivered: Delivered = ...,
    timestamp: str = ...,
):
    """
    Tell Nexmo if your SMS message was successful
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/voice',
    description=""" Send a Conversion API request with information about the Call or Text-To-Speech identified by `message-id`. Nexmo uses your conversion data and internal information about `message-id` to help improve our routing of messages in the future. """,
    tags=['voice_call_status_reporting'],
    security=[
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="api_secret"),
        APIKeyQuery(name="api_key"),
        APIKeyQuery(name="sig"),
    ],
)
def voice_conversion(
    message_id: str = Query(..., alias='message-id'),
    delivered: Delivered = ...,
    timestamp: str = ...,
):
    """
    Tell Nexmo if your voice call was successful
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
